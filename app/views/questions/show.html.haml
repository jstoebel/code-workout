#ajax
= render partial: 'layouts/breadcrumb'

%h1
  =@question.title

%h3
  - if @question.exercise_id?
    = "Exercise: #{@question.exercise.name}"
  - else
    = "Exercise: No Exercise Specified"


%table
  %tbody
    %tr
      %td
        %button#vote_up.btn.btn-success.glyphicon.glyphicon-thumbs-up{:type => "button"}
          = button_to '+', up_vote_question_path(@question), method: :post
          = @question.up_votes.count
      %td
        %button#vote_down.btn.btn-danger.glyphicon.glyphicon-thumbs-down{:type => "button"}
          = button_to '-', down_vote_question_path(@question), method: :post
          = @question.down_votes.count
      %td 	
        %h1= @question.body
%table
  %tbody
    %tr
      %td  
        = link_to "Edit", edit_question_path(@question), class: "btn btn-default"          
      %td 
        = form_for @question, url: question_path(@question.id), html: {:onsubmit => "return confirm('Are you sure you want to delete the question?');"}, method: :delete do |f| 
          = f.submit 'Delete', class: "btn btn-default"  

-# KEY: flagging feature for Q&A
-# Clicking duplicate should open a pop up window where a user can provide the url of the question that the current question is the deplicate of, and an optional text box for indicating the reason. The duplicates table should be updated with the current question id, duplicated question id, and the user id. An action should also be included in the questions controller for the flagging button.
-# Currently, the flagging works for admin user--other users are prevented from performing flagging due to authorization restrictions, which should be resolved in the future.

=form_for @question, url: question_path(@question.id) do |f|                            
  =f.select(:flags, options_for_select([['Flag',''],['Duplicate', 'Duplicate'], ['Off Topic', 'Off Topic'],['Contains inappropriate langauge','Contains inappropriate langauge']]), {}, {:style => "max-width: 100px;"})      
  =f.submit 'Submit', url: question_path(@question.id), class: 'btn btn-default'

%h3
  = "User: #{@question.user.first_name} #{@question.user.last_name}"
%h3
  = "Posted: #{@question.created_at.strftime("%m-%d-%Y")}"
-if @question.tags != nil
  %h3
    = "TAGS: #{@question.tags}"


%h2 Responses:
- if @responses.size == 0
  %h3 No Responses
- else
  %table.table.table-striped{ style: 'width: auto' }
    %thead
      %th Text:
      %th User:     
      %th Posted:
    %tbody
      - @responses.each do |response|
        %tr 
          %td
            = response.text
          %td
            = "#{response.user.first_name} #{response.user.last_name}" 
          %td
            = response.created_at.strftime("%m-%d-%Y")

=render(:partial => 'application/record_error_messages', :locals => {:record => @response})

-# Button trigger modal 
%button.btn.btn-primary.btn-md{"data-target" => "#myModalHorizontal", "data-toggle" => "modal"}
  Respond
-# Modal
#myModalHorizontal.modal.fade{"aria-hidden" => "true", "aria-labelledby" => "myModalLabel", :role => "dialog", :tabindex => "-1"}
  .modal-dialog.modal-lg
    .modal-content
      -# Modal Header
      .modal-header
        %button.close{"data-dismiss" => "modal", :type => "button"}
          %span{"aria-hidden" => "true"} Ã—
          %span.sr-only
            Cancel
        %h4#myModalLabel.modal-title
          Your Response
      -# Modal Body
      .modal-body
        = form_for(@response, url: responses_path) do |f|
          %textarea#your-response.form-control{:name => "response[text]", :rows => "10"}
          = f.hidden_field(:question_id, :value => @question.id)
          -# Modal Footer
          .modal-footer
            %button.btn.btn-default{"data-dismiss" => "modal", :type => "button"}
              Cancel
            = f.submit "Respond", class: "btn btn-success"
